{"version":3,"sources":["components/TodoForm.js","components/TodoItem.js","components/Footer.js","App.js","index.js"],"names":["TodoForm","state","text","handleChange","_ref","_ref$target","target","name","value","_this","setState","Object","defineProperty","handleSubmit","event","addTodo","props","preventDefault","length","id","shortid","generate","complete","react_default","a","createElement","onSubmit","this","className","placeholder","onChange","Component","TodoItem","todo","onDelete","toggleComplete","type","onClick","checked","style","textDecoration","color","htmlFor","Footer","updateTodoToShow","todosToShow","removeAllCompleteTodos","preparedtTodos","todos","display","filter","href","some","App","toggleAllComplete","prevState","concat","toConsumableArray","map","_objectSpread","string","handleDeleteTodo","_this2","_this$state","TodoForm_TodoForm","components_TodoItem","key","components_Footer","React","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.307bd582.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport shortid from 'shortid';\n\nexport default class TodoForm extends Component {\n  state = {\n    text: '',\n  }\n\n  handleChange = ({ target: { name, value } }) => {\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  handleSubmit = (event) => {\n    const { text } = this.state;\n    const { addTodo } = this.props;\n\n    event.preventDefault();\n\n    if (text.length === 0) {\n      return;\n    }\n\n    addTodo({\n      id: shortid.generate(),\n      text,\n      complete: false,\n    });\n\n    this.setState({\n      text: '',\n    });\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          name=\"text\"\n          value={this.state.text}\n          onChange={this.handleChange}\n        />\n      </form>\n    );\n  }\n}\n\nTodoForm.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TodoItem = ({\n  todo, id, onDelete, toggleComplete,\n}) => (\n  <li className=\"\">\n    <div className=\"view\">\n      <input\n        type=\"checkbox\"\n        className=\"toggle\"\n        id={id}\n        onClick={toggleComplete}\n        checked={todo.complete ? 'checked' : ''}\n      />\n      <label\n        style={todo.complete\n          ? { textDecoration: 'line-through', color: '#D9D9D9' }\n          : {}}\n        htmlFor={id}\n      >\n        {todo.text}\n      </label>\n      <button\n        type=\"button\"\n        className=\"destroy\"\n        onClick={onDelete}\n      />\n    </div>\n  </li>\n);\n\nTodoItem.propTypes = {\n  id: PropTypes.number.isRequired,\n  onDelete: PropTypes.func.isRequired,\n  toggleComplete: PropTypes.func.isRequired,\n  todo: PropTypes.shape({\n    text: PropTypes.string.isRequired,\n    complete: PropTypes.bool.isRequired,\n  }).isRequired,\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Footer = ({\n  updateTodoToShow, todosToShow, removeAllCompleteTodos, preparedtTodos, todos,\n}) => (\n  <footer className=\"footer\" style={{ display: 'block' }}>\n    <span className=\"todo-count\">\n      {todosToShow === 'completed'\n        ? todos.filter(todo => !todo.complete).length\n        : preparedtTodos.filter(todo => !todo.complete).length}\n      {' '}\n        items left\n    </span>\n\n    <ul className=\"filters\">\n      <li>\n        <a\n          onClick={() => updateTodoToShow('all')}\n          href=\"#/\"\n          className={todosToShow === 'all' ? 'selected' : ''}\n        >\n            All\n        </a>\n      </li>\n\n      <li>\n        <a\n          onClick={() => updateTodoToShow('active')}\n          href=\"#/active\"\n          className={todosToShow === 'active' ? 'selected' : ''}\n        >\n            Active\n        </a>\n      </li>\n\n      <li>\n        <a\n          onClick={() => updateTodoToShow('completed')}\n          href=\"#/completed\"\n          className={todosToShow === 'completed' ? 'selected' : ''}\n        >\n            Completed\n        </a>\n      </li>\n    </ul>\n\n    {preparedtTodos.some(todo => todo.complete)\n        && (\n          <button\n            onClick={removeAllCompleteTodos}\n            type=\"button\"\n            className=\"clear-completed\"\n            style={{ display: 'block' }}\n          >\n            {' '}\n            Clear completed\n          </button>\n        )\n    }\n  </footer>\n);\n\nFooter.propTypes = {\n  removeAllCompleteTodos: PropTypes.func.isRequired,\n  updateTodoToShow: PropTypes.func.isRequired,\n  todosToShow: PropTypes.string.isRequired,\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  preparedtTodos: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default Footer;\n","import React from 'react';\nimport TodoForm from './components/TodoForm';\nimport TodoItem from './components/TodoItem';\nimport Footer from './components/Footer';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    todosToShow: 'all',\n    toggleAllComplete: true,\n  }\n\n  addTodo = (todo) => {\n    this.setState(prevState => ({\n      todos: [todo, ...prevState.todos],\n    }));\n  }\n\n  toggleComplete = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            complete: !todo.complete,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  updateTodoToShow = (string) => {\n    this.setState({\n      todosToShow: string,\n    });\n  }\n\n  handleDeleteTodo = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => todo.id !== id),\n    }));\n  }\n\n  removeAllCompleteTodos = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => !todo.complete),\n    }));\n  }\n\n  toggleAllComplete = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map(todo => ({\n        ...todo,\n        complete: prevState.toggleAllComplete,\n      })),\n      toggleAllComplete: !prevState.toggleAllComplete,\n    }));\n  }\n\n  render() {\n    const { todosToShow, todos } = this.state;\n\n    let preparedtTodos = [];\n\n    if (todosToShow === 'all') {\n      preparedtTodos = todos;\n    } else if (todosToShow === 'active') {\n      preparedtTodos = todos.filter(todo => !todo.complete);\n    } else if (todosToShow === 'completed') {\n      preparedtTodos = todos.filter(todo => todo.complete);\n    }\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <TodoForm addTodo={this.addTodo} />\n        </header>\n\n        <section className=\"main\" style={{ display: 'block' }}>\n          <input\n            onClick={this.toggleAllComplete}\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n          <ul className=\"todo-list\">\n            {preparedtTodos.map(todo => (\n              <TodoItem\n                key={todo.id}\n                todo={todo}\n                id={todo.id}\n                toggleComplete={() => this.toggleComplete(todo.id)}\n                onDelete={() => this.handleDeleteTodo(todo.id)}\n              />\n            ))}\n          </ul>\n        </section>\n\n        <Footer\n          todos={todos}\n          preparedtTodos={preparedtTodos}\n          todosToShow={todosToShow}\n          updateTodoToShow={this.updateTodoToShow}\n          removeAllCompleteTodos={this.removeAllCompleteTodos}\n        />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}